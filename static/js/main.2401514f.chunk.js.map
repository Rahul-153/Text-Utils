{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","darkText","role","onClick","toggleMode","for","protoTypes","PropTypes","string","TextForm","newText","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","toUpperCase","document","querySelector","innerHTML","showAlert","toLowerCase","select","navigator","clipboard","writeText","split","length","Alert","alert","word","low","charAt","slice","caps","msg","App","setmode","_useState3","_useState4","setdarkText","_useState5","_useState6","setalert","message","setTimeout","Fragment","components_Navbar","body","components_Alert","components_TextForm","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.2401514f.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\n\nfunction Navbar(props) {\n    return (\n        <div>\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n      </ul>\n      <div className={`form-check form-switch ${props.darkText}`}>\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\n  <label className=\"form-check-label-light\" for=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n</div>\n    </div>\n  </div>\n</nav>\n        </div>\n    )\n}\n\nNavbar.protoTypes={\n    title: PropTypes.string\n}\n\nexport default Navbar;\n\n\n","import React,{useState} from 'react'\n\n\nfunction TextForm(props) {\n    let newText;\n    const handleUpClick=()=>{\n        console.log(\"handle on onclick\")\n        newText=text.toUpperCase();\n        document.querySelector(\".preview-text\").innerHTML=newText;\n        props.showAlert(\"Text converted to UpperCase\",\"success\")\n    }\n    let handleCopy=()=>{\n        var text=document.querySelector(\"#myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert(\"Copied to clipboard\",\"success\")\n    }\n    const handleLowClick=()=>{\n        console.log(\"handle on onclick\")\n        newText=text.toLowerCase();\n        document.querySelector(\".preview-text\").innerHTML=newText;\n        props.showAlert(\"Text converted to LowerCase\",\"success\")\n    }\n    const handleOnChange=(event)=>{\n        console.log(\"handle on change\");\n        setText(event.target.value);\n    }\n    const [text,setText]=useState(\"\");\n    return (\n        <div style={{color:props.mode==='dark'?'white':'black'}}>\n        <div className='container my-3'>\n            <h1>{props.heading}</h1>\n<div className=\"mb-3\">\n  <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'#325885':'white',color:props.mode==='dark'?'white':'black'}}></textarea>\n</div>\n<button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to Uppercase</button>\n<button className='btn btn-primary mx-2' onClick={handleLowClick}>Convert to Lowercase</button>\n<button className='btn btn-primary mx-2' onClick={handleCopy}>Copy Text</button>\n        </div>\n        <div className='container my-3'>\n            <h3>Text Summary</h3>\n            <p className='text-sum'>{text.split(\" \").length} words and {text.length} characters</p>\n        </div>\n        <div className='container my-3'>\n            <h3>Preview Your Text</h3>\n            <p className='preview-text'></p>\n        </div>\n        </div>\n    )\n}\n\nexport default TextForm;\n","import React from 'react'\n\nfunction Alert(props) {\n    const caps=(word)=>{\n        const low=word.toLowerCase();\n        return low.charAt('0').toUpperCase()+low.slice(1);\n    }\n    return (\n        props.alert && <div>\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{caps(props.alert.type)}</strong>: {props.alert.msg}\n            </div>\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React,{useState} from 'react'\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [darkText, setdarkText] = useState('');\n  const [alert, setalert] = useState(null);\n\n  const showAlert=(message,type)=>{\n    setalert(\n      {\n        msg:message,\n        type:type\n      }\n    );\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  }\n\n  const toggleMode=()=>{\n    if(mode==='dark'){\n      setmode('light');\n      setdarkText('');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode is enabled\",\"success\");\n    }\n    else{\n      setmode('dark');\n      setdarkText('text-light');\n      document.body.style.backgroundColor='#325885';\n      showAlert(\"Dark mode is enabled\",\"success\");\n    }\n  }\n  return (\n    <>\n    <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} darkText={darkText}/>\n    <Alert alert={alert}/>\n    <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert}/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}